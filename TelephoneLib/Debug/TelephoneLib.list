
TelephoneLib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800394c  0800394c  0000494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800409c  0800409c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800409c  0800409c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800409c  0800409c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0000509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040a0  080040a0  000050a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000634  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000640  20000640  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc0b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf4  00000000  00000000  00015c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00018840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7b  00000000  00000000  00019620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb76  00000000  00000000  0001a09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135a8  00000000  00000000  00038c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0aed  00000000  00000000  0004c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fcca6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000383c  00000000  00000000  000fccec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00100528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003934 	.word	0x08003934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003934 	.word	0x08003934

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b42      	ldr	r3, [pc, #264]	@ (80002e8 <MX_GPIO_Init+0x120>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a41      	ldr	r2, [pc, #260]	@ (80002e8 <MX_GPIO_Init+0x120>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b3f      	ldr	r3, [pc, #252]	@ (80002e8 <MX_GPIO_Init+0x120>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b3c      	ldr	r3, [pc, #240]	@ (80002e8 <MX_GPIO_Init+0x120>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a3b      	ldr	r2, [pc, #236]	@ (80002e8 <MX_GPIO_Init+0x120>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b39      	ldr	r3, [pc, #228]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b36      	ldr	r3, [pc, #216]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a35      	ldr	r2, [pc, #212]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b33      	ldr	r3, [pc, #204]	@ (80002e8 <MX_GPIO_Init+0x120>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b30      	ldr	r3, [pc, #192]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a2f      	ldr	r2, [pc, #188]	@ (80002e8 <MX_GPIO_Init+0x120>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b2d      	ldr	r3, [pc, #180]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b2a      	ldr	r3, [pc, #168]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a29      	ldr	r2, [pc, #164]	@ (80002e8 <MX_GPIO_Init+0x120>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <MX_GPIO_Init+0x120>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800025c:	4823      	ldr	r0, [pc, #140]	@ (80002ec <MX_GPIO_Init+0x124>)
 800025e:	f001 f9af 	bl	80015c0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 41b0 	mov.w	r1, #22528	@ 0x5800
 8000268:	4821      	ldr	r0, [pc, #132]	@ (80002f0 <MX_GPIO_Init+0x128>)
 800026a:	f001 f9a9 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800026e:	2337      	movs	r3, #55	@ 0x37
 8000270:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000272:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	481a      	ldr	r0, [pc, #104]	@ (80002ec <MX_GPIO_Init+0x124>)
 8000284:	f001 f822 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000288:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800028c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	4812      	ldr	r0, [pc, #72]	@ (80002ec <MX_GPIO_Init+0x124>)
 80002a2:	f001 f813 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a6:	2301      	movs	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 f806 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin;
 80002c0:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 80002c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <MX_GPIO_Init+0x128>)
 80002da:	f000 fff7 	bl	80012cc <HAL_GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	@ 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48001000 	.word	0x48001000
 80002f0:	48000400 	.word	0x48000400

080002f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <MX_I2C1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	@ (800036c <MX_I2C1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000300:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <MX_I2C1_Init+0x7c>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030a:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <MX_I2C1_Init+0x74>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031c:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000322:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032e:	480e      	ldr	r0, [pc, #56]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000330:	f001 f95e 	bl	80015f0 <HAL_I2C_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800033a:	f000 fc8d 	bl	8000c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000342:	f001 f9f0 	bl	8001726 <HAL_I2CEx_ConfigAnalogFilter>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800034c:	f000 fc84 	bl	8000c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4805      	ldr	r0, [pc, #20]	@ (8000368 <MX_I2C1_Init+0x74>)
 8000354:	f001 fa32 	bl	80017bc <HAL_I2CEx_ConfigDigitalFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 fc7b 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000028 	.word	0x20000028
 800036c:	40005400 	.word	0x40005400
 8000370:	00201d2b 	.word	0x00201d2b

08000374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	@ 0x28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <HAL_I2C_MspInit+0x7c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d127      	bne.n	80003e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 800039c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003ae:	23c0      	movs	r3, #192	@ 0xc0
 80003b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003b2:	2312      	movs	r3, #18
 80003b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ba:	2303      	movs	r3, #3
 80003bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003be:	2304      	movs	r3, #4
 80003c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <HAL_I2C_MspInit+0x84>)
 80003ca:	f000 ff7f 	bl	80012cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 80003d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <HAL_I2C_MspInit+0x80>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003e6:	bf00      	nop
 80003e8:	3728      	adds	r7, #40	@ 0x28
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40005400 	.word	0x40005400
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400

080003fc <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fb58 	bl	8000abc <LCD5110_refresh_ll>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f503 7205 	add.w	r2, r3, #532	@ 0x214
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f000 f87c 	bl	8000528 <LCD5110_wprint>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b08b      	sub	sp, #44	@ 0x2c
 800043c:	af04      	add	r7, sp, #16
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	4613      	mov	r3, r2
 8000446:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800044a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800044e:	2b00      	cmp	r3, #0
 8000450:	db41      	blt.n	80004d6 <LCD5110_wputchar+0x9e>
 8000452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000454:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db3c      	blt.n	80004d6 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800045c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800045e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000462:	461a      	mov	r2, r3
 8000464:	2306      	movs	r3, #6
 8000466:	4413      	add	r3, r2
 8000468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800046a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800046e:	4293      	cmp	r3, r2
 8000470:	d833      	bhi.n	80004da <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000474:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000478:	461a      	mov	r2, r3
 800047a:	2308      	movs	r3, #8
 800047c:	4413      	add	r3, r2
 800047e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000480:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000484:	4293      	cmp	r3, r2
 8000486:	d828      	bhi.n	80004da <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <LCD5110_wputchar+0xac>)
 800048a:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800048c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800048e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000492:	461a      	mov	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	18d0      	adds	r0, r2, r3
 8000498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800049a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800049e:	461a      	mov	r2, r3
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	18d1      	adds	r1, r2, r3
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2206      	movs	r2, #6
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	441a      	add	r2, r3
 80004b0:	2306      	movs	r3, #6
 80004b2:	461e      	mov	r6, r3
 80004b4:	2308      	movs	r3, #8
 80004b6:	461c      	mov	r4, r3
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	461d      	mov	r5, r3
 80004c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004c8:	9302      	str	r3, [sp, #8]
 80004ca:	9501      	str	r5, [sp, #4]
 80004cc:	9400      	str	r4, [sp, #0]
 80004ce:	4633      	mov	r3, r6
 80004d0:	f000 f8f6 	bl	80006c0 <LCD5110_drawBitmap>
 80004d4:	e002      	b.n	80004dc <LCD5110_wputchar+0xa4>
		return;
 80004d6:	bf00      	nop
 80004d8:	e000      	b.n	80004dc <LCD5110_wputchar+0xa4>
		return;
 80004da:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e2:	bf00      	nop
 80004e4:	08003958 	.word	0x08003958

080004e8 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	2308      	movs	r3, #8
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4413      	add	r3, r2
 8000500:	b29b      	uxth	r3, r3
 8000502:	3301      	adds	r3, #1
 8000504:	b29b      	uxth	r3, r3
 8000506:	b21a      	sxth	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2202      	movs	r2, #2
 8000510:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7b1b      	ldrb	r3, [r3, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800051a:	6838      	ldr	r0, [r7, #0]
 800051c:	f7ff ff6e 	bl	80003fc <LCD5110_refresh>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000536:	e053      	b.n	80005e0 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b0a      	cmp	r3, #10
 800053e:	d010      	beq.n	8000562 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000546:	4618      	mov	r0, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800054e:	4619      	mov	r1, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	f7ff ff6b 	bl	8000438 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000568:	b29a      	uxth	r2, r3
 800056a:	2306      	movs	r3, #6
 800056c:	b29b      	uxth	r3, r3
 800056e:	4413      	add	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	b21a      	sxth	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800057e:	461a      	mov	r2, r3
 8000580:	2306      	movs	r3, #6
 8000582:	4413      	add	r3, r2
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800058a:	4293      	cmp	r3, r2
 800058c:	d904      	bls.n	8000598 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000594:	2b0a      	cmp	r3, #10
 8000596:	d103      	bne.n	80005a0 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b0a      	cmp	r3, #10
 800059e:	d111      	bne.n	80005c4 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffa0 	bl	80004e8 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <LCD5110_wprint+0xcc>)
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <LCD5110_wprint+0x9c>
				++str;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80005ca:	461a      	mov	r2, r3
 80005cc:	2308      	movs	r3, #8
 80005ce:	4413      	add	r3, r2
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d807      	bhi.n	80005ea <LCD5110_wprint+0xc2>
			break;
		str++;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1a7      	bne.n	8000538 <LCD5110_wprint+0x10>

	}
}
 80005e8:	e000      	b.n	80005ec <LCD5110_wprint+0xc4>
			break;
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08003f98 	.word	0x08003f98

080005f8 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	10db      	asrs	r3, r3, #3
 8000608:	2254      	movs	r2, #84	@ 0x54
 800060a:	fb03 f202 	mul.w	r2, r3, r2
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	2201      	movs	r2, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	753b      	strb	r3, [r7, #20]

	return res;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	461a      	mov	r2, r3
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000630:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db31      	blt.n	80006b8 <LCD5110_putpix+0x78>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db2e      	blt.n	80006b8 <LCD5110_putpix+0x78>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b53      	cmp	r3, #83	@ 0x53
 800065e:	dc2b      	bgt.n	80006b8 <LCD5110_putpix+0x78>
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b2f      	cmp	r3, #47	@ 0x2f
 8000664:	dc28      	bgt.n	80006b8 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffc2 	bl	80005f8 <xy_to_pix>

	if (color)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00c      	beq.n	8000694 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	4413      	add	r3, r2
 8000680:	7f19      	ldrb	r1, [r3, #28]
 8000682:	7d3a      	ldrb	r2, [r7, #20]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	430a      	orrs	r2, r1
 8000688:	b2d1      	uxtb	r1, r2
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	771a      	strb	r2, [r3, #28]
 8000692:	e012      	b.n	80006ba <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	7f1b      	ldrb	r3, [r3, #28]
 800069c:	b25a      	sxtb	r2, r3
 800069e:	7d3b      	ldrb	r3, [r7, #20]
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4013      	ands	r3, r2
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	460a      	mov	r2, r1
 80006b4:	771a      	strb	r2, [r3, #28]
 80006b6:	e000      	b.n	80006ba <LCD5110_putpix+0x7a>
		return;
 80006b8:	bf00      	nop
}
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	e03d      	b.n	8000750 <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	e033      	b.n	8000742 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da00      	bge.n	80006e2 <LCD5110_drawBitmap+0x22>
 80006e0:	3307      	adds	r3, #7
 80006e2:	10db      	asrs	r3, r3, #3
 80006e4:	461a      	mov	r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	fb03 f202 	mul.w	r2, r3, r2
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	4413      	add	r3, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	f003 0307 	and.w	r3, r3, #7
 8000700:	2201      	movs	r2, #1
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	b25a      	sxtb	r2, r3
 8000708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800070c:	4013      	ands	r3, r2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	18d0      	adds	r0, r2, r3
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	18d1      	adds	r1, r2, r3
 800071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <LCD5110_drawBitmap+0x74>
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	e000      	b.n	8000736 <LCD5110_drawBitmap+0x76>
 8000734:	7dfa      	ldrb	r2, [r7, #23]
 8000736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000738:	f7ff ff82 	bl	8000640 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	3301      	adds	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000746:	429a      	cmp	r2, r3
 8000748:	dbc7      	blt.n	80006da <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3301      	adds	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	69fa      	ldr	r2, [r7, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	dbbd      	blt.n	80006d4 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	6039      	str	r1, [r7, #0]
 800076c:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	1df9      	adds	r1, r7, #7
 8000774:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000778:	2201      	movs	r2, #1
 800077a:	f002 fd9c 	bl	80032b6 <HAL_SPI_Transmit>
 800077e:	4603      	mov	r3, r0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	460b      	mov	r3, r1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	897a      	ldrh	r2, [r7, #10]
 800079c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	f002 fd88 	bl	80032b6 <HAL_SPI_Transmit>
 80007a6:	4603      	mov	r3, r0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6898      	ldr	r0, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	f000 fefc 	bl	80015c0 <HAL_GPIO_WritePin>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6998      	ldr	r0, [r3, #24]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	8a9b      	ldrh	r3, [r3, #20]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f000 feec 	bl	80015c0 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6998      	ldr	r0, [r3, #24]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	8a9b      	ldrh	r3, [r3, #20]
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	f000 fedc 	bl	80015c0 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6918      	ldr	r0, [r3, #16]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	f000 fecc 	bl	80015c0 <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6918      	ldr	r0, [r3, #16]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	f000 febc 	bl	80015c0 <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f023 0320 	bic.w	r3, r3, #32
 8000862:	2b07      	cmp	r3, #7
 8000864:	dd01      	ble.n	800086a <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000866:	2301      	movs	r3, #1
 8000868:	e008      	b.n	800087c <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	b2db      	uxtb	r3, r3
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff74 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f023 030d 	bic.w	r3, r3, #13
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 800089a:	2302      	movs	r3, #2
 800089c:	e005      	b.n	80008aa <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff5d 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	6039      	str	r1, [r7, #0]
 80008bc:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da01      	bge.n	80008ca <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e008      	b.n	80008dc <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff44 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d901      	bls.n	80008fa <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 80008f6:	2304      	movs	r3, #4
 80008f8:	e008      	b.n	800090c <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff2c 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d901      	bls.n	800092a <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000926:	2305      	movs	r3, #5
 8000928:	e008      	b.n	800093c <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	b2db      	uxtb	r3, r3
 8000932:	6839      	ldr	r1, [r7, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff14 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db03      	blt.n	8000960 <LCD5110_set_X_base+0x1c>
 8000958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095c:	2b53      	cmp	r3, #83	@ 0x53
 800095e:	dd01      	ble.n	8000964 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000960:	2307      	movs	r3, #7
 8000962:	e00a      	b.n	800097a <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fef5 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	6039      	str	r1, [r7, #0]
 800098c:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db03      	blt.n	800099e <LCD5110_set_Y_base+0x1c>
 8000996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099a:	2b05      	cmp	r3, #5
 800099c:	dd01      	ble.n	80009a2 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800099e:	2307      	movs	r3, #7
 80009a0:	e00a      	b.n	80009b8 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fed6 	bl	8000762 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	603a      	str	r2, [r7, #0]
 80009ca:	80fb      	strh	r3, [r7, #6]
 80009cc:	460b      	mov	r3, r1
 80009ce:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 80009d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffb4 	bl	8000944 <LCD5110_set_X_base>
 80009dc:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <LCD5110_set_XY_base+0x28>
		return res;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	e00c      	b.n	8000a02 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 80009e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffc7 	bl	8000982 <LCD5110_set_Y_base>
 80009f4:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <LCD5110_set_XY_base+0x40>
		return res;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	e000      	b.n	8000a02 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	70fb      	strb	r3, [r7, #3]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70bb      	strb	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffdc 	bl	8000a0a <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff feac 	bl	80007b0 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fee9 	bl	8000830 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000a5e:	2364      	movs	r3, #100	@ 0x64
 8000a60:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000a62:	bf00      	nop
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1fa      	bne.n	8000a64 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fece 	bl	8000810 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff febb 	bl	80007f0 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fee7 	bl	8000850 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000a82:	78bb      	ldrb	r3, [r7, #2]
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff13 	bl	80008b2 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff27 	bl	80008e4 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000a96:	7e3b      	ldrb	r3, [r7, #24]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff3a 	bl	8000914 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fed4 	bl	8000850 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fee9 	bl	8000884 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000ab2:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fe73 	bl	80007b0 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe90 	bl	80007f0 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff73 	bl	80009c0 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe78 	bl	80007d0 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	331c      	adds	r3, #28
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe4c 	bl	8000788 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fa99 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f847 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f7ff fb5f 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b0a:	f7ff fbf3 	bl	80002f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b0e:	f000 f8a9 	bl	8000c64 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000b12:	f000 f9ff 	bl	8000f14 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000b16:	f000 f8e3 	bl	8000ce0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi2;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <main+0x88>)
 8000b1c:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <main+0x8c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <main+0x88>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b26:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <main+0x88>)
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <main+0x90>)
 8000b2c:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <main+0x88>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b34:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <main+0x88>)
 8000b38:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <main+0x90>)
 8000b3a:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <main+0x88>)
 8000b3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b42:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <main+0x88>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <main+0x90>)
 8000b48:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <main+0x88>)
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <main+0x94>)
 8000b4e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8000b52:	4614      	mov	r4, r2
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	6861      	ldr	r1, [r4, #4]
 8000b58:	68a2      	ldr	r2, [r4, #8]
 8000b5a:	c307      	stmia	r3!, {r0, r1, r2}
 8000b5c:	89a2      	ldrh	r2, [r4, #12]
 8000b5e:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000b60:	2303      	movs	r3, #3
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2302      	movs	r3, #2
 8000b66:	2240      	movs	r2, #64	@ 0x40
 8000b68:	210c      	movs	r1, #12
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <main+0x88>)
 8000b6c:	f7ff ff61 	bl	8000a32 <LCD5110_init>

  LCD5110_print("SOSI SUKA!\n", BLACK, &lcd1);
 8000b70:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <main+0x88>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <main+0x98>)
 8000b76:	f7ff fc4d 	bl	8000414 <LCD5110_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <main+0x82>
 8000b7e:	bf00      	nop
 8000b80:	2000007c 	.word	0x2000007c
 8000b84:	20000304 	.word	0x20000304
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	08003f58 	.word	0x08003f58
 8000b90:	0800394c 	.word	0x0800394c

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	@ 0x78
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b9e:	2228      	movs	r2, #40	@ 0x28
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fe99 	bl	80038da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	223c      	movs	r2, #60	@ 0x3c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fe8b 	bl	80038da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000be4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000be8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fef8 	bl	80019e4 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f82d 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 ff20 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c26:	f000 f817 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <SystemClock_Config+0xc0>)
 8000c2c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f8e0 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c46:	f000 f807 	bl	8000c58 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3778      	adds	r7, #120	@ 0x78
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	00020020 	.word	0x00020020

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <MX_SPI1_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c7e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cc4:	f002 fa4c 	bl	8003160 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f7ff ffc3 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200002a0 	.word	0x200002a0
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <MX_SPI2_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000cec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000cfa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d16:	2218      	movs	r2, #24
 8000d18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_SPI2_Init+0x74>)
 8000d40:	f002 fa0e 	bl	8003160 <HAL_SPI_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f7ff ff85 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000304 	.word	0x20000304
 8000d58:	40003800 	.word	0x40003800

08000d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <HAL_SPI_MspInit+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d129      	bne.n	8000dd2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a2e      	ldr	r2, [pc, #184]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000dae:	23e0      	movs	r3, #224	@ 0xe0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dcc:	f000 fa7e 	bl	80012cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dd0:	e02d      	b.n	8000e2e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e40 <HAL_SPI_MspInit+0xe4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d128      	bne.n	8000e2e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a16      	ldr	r2, [pc, #88]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000dfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_SPI_MspInit+0xe0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD1_CLK_Pin|LCD1_DATA_Pin;
 8000e0c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <HAL_SPI_MspInit+0xe8>)
 8000e2a:	f000 fa4f 	bl	80012cc <HAL_GPIO_Init>
}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	@ 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40003800 	.word	0x40003800
 8000e44:	48000400 	.word	0x48000400

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f000 f9f0 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f8eb 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <MX_USB_PCD_Init+0x40>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_USB_PCD_Init+0x3c>)
 8000f3e:	f000 fc89 	bl	8001854 <HAL_PCD_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f48:	f7ff fe86 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000368 	.word	0x20000368
 8000f54:	40005c00 	.word	0x40005c00

08000f58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_PCD_MspInit+0x80>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d129      	bne.n	8000fce <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000f92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000fa4:	230e      	movs	r3, #14
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb2:	f000 f98b 	bl	80012cc <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000fbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_PCD_MspInit+0x84>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40005c00 	.word	0x40005c00
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff ff84 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 fc6d 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fd71 	bl	8000af8 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001018:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	080040a4 	.word	0x080040a4
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	20000640 	.word	0x20000640

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>
	...

08001034 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_Init+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_Init+0x28>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f90d 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fefa 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f917 	bl	80012b2 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f8ed 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	2000063c 	.word	0x2000063c

080010e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000063c 	.word	0x2000063c

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e154      	b.n	8001586 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8146 	beq.w	8001580 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x40>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 0201 	and.w	r2, r3, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80a0 	beq.w	8001580 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b58      	ldr	r3, [pc, #352]	@ (80015a4 <HAL_GPIO_Init+0x2d8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a57      	ldr	r2, [pc, #348]	@ (80015a4 <HAL_GPIO_Init+0x2d8>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b55      	ldr	r3, [pc, #340]	@ (80015a4 <HAL_GPIO_Init+0x2d8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001458:	4a53      	ldr	r2, [pc, #332]	@ (80015a8 <HAL_GPIO_Init+0x2dc>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001482:	d019      	beq.n	80014b8 <HAL_GPIO_Init+0x1ec>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a49      	ldr	r2, [pc, #292]	@ (80015ac <HAL_GPIO_Init+0x2e0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d013      	beq.n	80014b4 <HAL_GPIO_Init+0x1e8>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a48      	ldr	r2, [pc, #288]	@ (80015b0 <HAL_GPIO_Init+0x2e4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00d      	beq.n	80014b0 <HAL_GPIO_Init+0x1e4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a47      	ldr	r2, [pc, #284]	@ (80015b4 <HAL_GPIO_Init+0x2e8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x1e0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a46      	ldr	r2, [pc, #280]	@ (80015b8 <HAL_GPIO_Init+0x2ec>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_GPIO_Init+0x1dc>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e008      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014a8:	2305      	movs	r3, #5
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e004      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b8:	2300      	movs	r3, #0
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ca:	4937      	ldr	r1, [pc, #220]	@ (80015a8 <HAL_GPIO_Init+0x2dc>)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d8:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fc:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001502:	4b2e      	ldr	r3, [pc, #184]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001526:	4a25      	ldr	r2, [pc, #148]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001550:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157a:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f aea3 	bne.w	80012dc <HAL_GPIO_Init+0x10>
  }
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e08d      	b.n	800171e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe feac 	bl	8000374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e006      	b.n	8001678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d108      	bne.n	8001692 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	e007      	b.n	80016a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69d9      	ldr	r1, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b20      	cmp	r3, #32
 800173a:	d138      	bne.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001746:	2302      	movs	r3, #2
 8001748:	e032      	b.n	80017b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2224      	movs	r2, #36	@ 0x24
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001778:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2220      	movs	r2, #32
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
  }
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d139      	bne.n	8001846 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017dc:	2302      	movs	r3, #2
 80017de:	e033      	b.n	8001848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2224      	movs	r2, #36	@ 0x24
 80017ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800180e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001846:	2302      	movs	r3, #2
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0b9      	b.n	80019da <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fb6c 	bl	8000f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f001 ffeb 	bl	8003868 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e03e      	b.n	8001916 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3311      	adds	r3, #17
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3310      	adds	r3, #16
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3313      	adds	r3, #19
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3320      	adds	r3, #32
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3324      	adds	r3, #36	@ 0x24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	3301      	adds	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	791b      	ldrb	r3, [r3, #4]
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3bb      	bcc.n	8001898 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e044      	b.n	80019b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3b5      	bcc.n	8001926 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019c6:	f001 ff6a 	bl	800389e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f001 b823 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 817d 	beq.w	8001d1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a20:	4bbc      	ldr	r3, [pc, #752]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d15c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x10e>
 8001a38:	4bb6      	ldr	r3, [pc, #728]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a44:	d155      	bne.n	8001af2 <HAL_RCC_OscConfig+0x10e>
 8001a46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x94>
 8001a72:	4ba8      	ldr	r3, [pc, #672]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e015      	b.n	8001aa4 <HAL_RCC_OscConfig+0xc0>
 8001a78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aa8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001aac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ab0:	fa92 f2a2 	rbit	r2, r2
 8001ab4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ab8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001abc:	fab2 f282 	clz	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f042 0220 	orr.w	r2, r2, #32
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f002 021f 	and.w	r2, r2, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 811f 	beq.w	8001d18 <HAL_RCC_OscConfig+0x334>
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8116 	bne.w	8001d18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f000 bfaf 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12e>
 8001b04:	4b83      	ldr	r3, [pc, #524]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a82      	ldr	r2, [pc, #520]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e036      	b.n	8001b80 <HAL_RCC_OscConfig+0x19c>
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x158>
 8001b22:	4b7c      	ldr	r3, [pc, #496]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a78      	ldr	r2, [pc, #480]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e021      	b.n	8001b80 <HAL_RCC_OscConfig+0x19c>
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x184>
 8001b4e:	4b71      	ldr	r3, [pc, #452]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a70      	ldr	r2, [pc, #448]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0x19c>
 8001b68:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a69      	ldr	r2, [pc, #420]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b67      	ldr	r3, [pc, #412]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a66      	ldr	r2, [pc, #408]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b80:	4b64      	ldr	r3, [pc, #400]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	f023 020f 	bic.w	r2, r3, #15
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	495f      	ldr	r1, [pc, #380]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d059      	beq.n	8001c5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fa9d 	bl	80010e8 <HAL_GetTick>
 8001bae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fa98 	bl	80010e8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	@ 0x64
 8001bc2:	d902      	bls.n	8001bca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f000 bf43 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 8001bca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001bde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0x218>
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_OscConfig+0x244>
 8001bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c24:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c34:	fa92 f2a2 	rbit	r2, r2
 8001c38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ab      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x1d0>
 8001c5c:	e05d      	b.n	8001d1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa43 	bl	80010e8 <HAL_GetTick>
 8001c62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fa3e 	bl	80010e8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	@ 0x64
 8001c76:	d902      	bls.n	8001c7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f000 bee9 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 8001c7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2cc>
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e015      	b.n	8001cdc <HAL_RCC_OscConfig+0x2f8>
 8001cb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ccc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ce0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ce4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ce8:	fa92 f2a2 	rbit	r2, r2
 8001cec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001cf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 021f 	and.w	r2, r2, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ab      	bne.n	8001c68 <HAL_RCC_OscConfig+0x284>
 8001d10:	e003      	b.n	8001d1a <HAL_RCC_OscConfig+0x336>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 817d 	beq.w	800202a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d30:	4ba6      	ldr	r3, [pc, #664]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d172      	bne.n	8001e2e <HAL_RCC_OscConfig+0x44a>
 8001d48:	4ba0      	ldr	r3, [pc, #640]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d16c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x44a>
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3a0>
 8001d7e:	4b93      	ldr	r3, [pc, #588]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e013      	b.n	8001dac <HAL_RCC_OscConfig+0x3c8>
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001da8:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	2202      	movs	r2, #2
 8001dae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001db2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001db6:	fa92 f2a2 	rbit	r2, r2
 8001dba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001dbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCC_OscConfig+0x410>
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f000 be2e 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b75      	ldr	r3, [pc, #468]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	21f8      	movs	r1, #248	@ 0xf8
 8001e0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e12:	fa91 f1a1 	rbit	r1, r1
 8001e16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e1e:	fab1 f181 	clz	r1, r1
 8001e22:	b2c9      	uxtb	r1, r1
 8001e24:	408b      	lsls	r3, r1
 8001e26:	4969      	ldr	r1, [pc, #420]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2c:	e0fd      	b.n	800202a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8088 	beq.w	8001f50 <HAL_RCC_OscConfig+0x56c>
 8001e40:	2301      	movs	r3, #1
 8001e42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	2301      	movs	r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f93c 	bl	80010e8 <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff f937 	bl	80010e8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d902      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f000 bde2 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4d8>
 8001eb6:	4b45      	ldr	r3, [pc, #276]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x500>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ed4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001eea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ef6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0af      	beq.n	8001e76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	21f8      	movs	r1, #248	@ 0xf8
 8001f2c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f34:	fa91 f1a1 	rbit	r1, r1
 8001f38:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f40:	fab1 f181 	clz	r1, r1
 8001f44:	b2c9      	uxtb	r1, r1
 8001f46:	408b      	lsls	r3, r1
 8001f48:	4920      	ldr	r1, [pc, #128]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
 8001f4e:	e06c      	b.n	800202a <HAL_RCC_OscConfig+0x646>
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f8b4 	bl	80010e8 <HAL_GetTick>
 8001f80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff f8af 	bl	80010e8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d902      	bls.n	8001f9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f000 bd5a 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d104      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5ec>
 8001fc6:	4b01      	ldr	r3, [pc, #4]	@ (8001fcc <HAL_RCC_OscConfig+0x5e8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e015      	b.n	8001ff8 <HAL_RCC_OscConfig+0x614>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ff4:	4bc8      	ldr	r3, [pc, #800]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800200a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ad      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8110 	beq.w	8002260 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d079      	beq.n	8002144 <HAL_RCC_OscConfig+0x760>
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4bab      	ldr	r3, [pc, #684]	@ (800231c <HAL_RCC_OscConfig+0x938>)
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	461a      	mov	r2, r3
 8002076:	2301      	movs	r3, #1
 8002078:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff f835 	bl	80010e8 <HAL_GetTick>
 800207e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff f830 	bl	80010e8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d902      	bls.n	800209a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	f000 bcdb 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f4:	4b88      	ldr	r3, [pc, #544]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 80020f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002100:	2102      	movs	r1, #2
 8002102:	6019      	str	r1, [r3, #0]
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f1a3 	rbit	r1, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800211a:	6019      	str	r1, [r3, #0]
  return result;
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0a0      	beq.n	8002084 <HAL_RCC_OscConfig+0x6a0>
 8002142:	e08d      	b.n	8002260 <HAL_RCC_OscConfig+0x87c>
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002166:	601a      	str	r2, [r3, #0]
  return result;
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002170:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4b68      	ldr	r3, [pc, #416]	@ (800231c <HAL_RCC_OscConfig+0x938>)
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	461a      	mov	r2, r3
 8002182:	2300      	movs	r3, #0
 8002184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe ffaf 	bl	80010e8 <HAL_GetTick>
 800218a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe ffaa 	bl	80010e8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d902      	bls.n	80021a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	f000 bc55 	b.w	8002a50 <HAL_RCC_OscConfig+0x106c>
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002212:	4b41      	ldr	r3, [pc, #260]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 8002214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800221e:	2102      	movs	r1, #2
 8002220:	6019      	str	r1, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f1a3 	rbit	r1, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002238:	6019      	str	r1, [r3, #0]
  return result;
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d197      	bne.n	8002190 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 81a1 	beq.w	80025b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227c:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d116      	bne.n	80022b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002288:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002292:	61d3      	str	r3, [r2, #28]
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_RCC_OscConfig+0x93c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_RCC_OscConfig+0x93c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_RCC_OscConfig+0x93c>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7fe ff0b 	bl	80010e8 <HAL_GetTick>
 80022d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	e009      	b.n	80022ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe ff06 	bl	80010e8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b64      	cmp	r3, #100	@ 0x64
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e3b1      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_RCC_OscConfig+0x93c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10d      	bne.n	8002324 <HAL_RCC_OscConfig+0x940>
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a02      	ldr	r2, [pc, #8]	@ (8002318 <HAL_RCC_OscConfig+0x934>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e03c      	b.n	8002390 <HAL_RCC_OscConfig+0x9ac>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	10908120 	.word	0x10908120
 8002320:	40007000 	.word	0x40007000
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x96a>
 8002334:	4bc1      	ldr	r3, [pc, #772]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4ac0      	ldr	r2, [pc, #768]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4bbe      	ldr	r3, [pc, #760]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4abd      	ldr	r2, [pc, #756]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e020      	b.n	8002390 <HAL_RCC_OscConfig+0x9ac>
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x994>
 800235e:	4bb7      	ldr	r3, [pc, #732]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4ab6      	ldr	r2, [pc, #728]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4bb4      	ldr	r3, [pc, #720]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4ab3      	ldr	r2, [pc, #716]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x9ac>
 8002378:	4bb0      	ldr	r3, [pc, #704]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4aaf      	ldr	r2, [pc, #700]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	4bad      	ldr	r3, [pc, #692]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4aac      	ldr	r2, [pc, #688]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800238a:	f023 0304 	bic.w	r3, r3, #4
 800238e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8081 	beq.w	80024a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fea1 	bl	80010e8 <HAL_GetTick>
 80023a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fe9c 	bl	80010e8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e345      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023f0:	2202      	movs	r2, #2
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002414:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0xa4c>
 800242a:	4b84      	ldr	r3, [pc, #528]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0xa74>
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	4b79      	ldr	r3, [pc, #484]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002460:	2102      	movs	r1, #2
 8002462:	6011      	str	r1, [r2, #0]
 8002464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002468:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	fa92 f1a2 	rbit	r1, r2
 8002472:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002476:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800247a:	6011      	str	r1, [r2, #0]
  return result;
 800247c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002480:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f002 021f 	and.w	r2, r2, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d084      	beq.n	80023ac <HAL_RCC_OscConfig+0x9c8>
 80024a2:	e07f      	b.n	80025a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fe20 	bl	80010e8 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fe1b 	bl	80010e8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e2c4      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024f2:	2202      	movs	r2, #2
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800250c:	601a      	str	r2, [r3, #0]
  return result;
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d102      	bne.n	8002532 <HAL_RCC_OscConfig+0xb4e>
 800252c:	4b43      	ldr	r3, [pc, #268]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	e013      	b.n	800255a <HAL_RCC_OscConfig+0xb76>
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800253a:	2202      	movs	r2, #2
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	4b39      	ldr	r3, [pc, #228]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002562:	2102      	movs	r1, #2
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	fa92 f1a2 	rbit	r1, r2
 8002574:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002578:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800257c:	6011      	str	r1, [r2, #0]
  return result;
 800257e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002582:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f002 021f 	and.w	r2, r2, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d184      	bne.n	80024ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8242 	beq.w	8002a4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <HAL_RCC_OscConfig+0xc58>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	f000 8213 	beq.w	80029fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	f040 8162 	bne.w	80028ae <HAL_RCC_OscConfig+0xeca>
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800260e:	601a      	str	r2, [r3, #0]
  return result;
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002618:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002624:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2300      	movs	r3, #0
 800262e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd5a 	bl	80010e8 <HAL_GetTick>
 8002634:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e00c      	b.n	8002654 <HAL_RCC_OscConfig+0xc70>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fd52 	bl	80010e8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1fd      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002678:	601a      	str	r2, [r3, #0]
  return result;
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002682:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_RCC_OscConfig+0xcba>
 8002698:	4bb0      	ldr	r3, [pc, #704]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	e027      	b.n	80026ee <HAL_RCC_OscConfig+0xd0a>
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	4b9c      	ldr	r3, [pc, #624]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026fa:	6011      	str	r1, [r2, #0]
 80026fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002700:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	fa92 f1a2 	rbit	r1, r2
 800270a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800270e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002712:	6011      	str	r1, [r2, #0]
  return result;
 8002714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002718:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f002 021f 	and.w	r2, r2, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d182      	bne.n	8002640 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273a:	4b88      	ldr	r3, [pc, #544]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	430b      	orrs	r3, r1
 800275c:	497f      	ldr	r1, [pc, #508]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800276a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800276e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002786:	601a      	str	r2, [r3, #0]
  return result;
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002790:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800279c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	2301      	movs	r3, #1
 80027a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fc9e 	bl	80010e8 <HAL_GetTick>
 80027ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	e009      	b.n	80027c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fc99 	bl	80010e8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e144      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	fa93 f2a3 	rbit	r2, r3
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027ea:	601a      	str	r2, [r3, #0]
  return result;
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0xe2c>
 800280a:	4b54      	ldr	r3, [pc, #336]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e027      	b.n	8002860 <HAL_RCC_OscConfig+0xe7c>
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	fa93 f2a3 	rbit	r2, r3
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800283e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002864:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002868:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800286c:	6011      	str	r1, [r2, #0]
 800286e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002872:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	fa92 f1a2 	rbit	r1, r2
 800287c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002880:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002884:	6011      	str	r1, [r2, #0]
  return result;
 8002886:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d082      	beq.n	80027b2 <HAL_RCC_OscConfig+0xdce>
 80028ac:	e0cf      	b.n	8002a4e <HAL_RCC_OscConfig+0x106a>
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028d2:	601a      	str	r2, [r3, #0]
  return result;
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fbf8 	bl	80010e8 <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	e009      	b.n	8002912 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fbf3 	bl	80010e8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e09e      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800291a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002936:	601a      	str	r2, [r3, #0]
  return result;
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d104      	bne.n	8002960 <HAL_RCC_OscConfig+0xf7c>
 8002956:	4b01      	ldr	r3, [pc, #4]	@ (800295c <HAL_RCC_OscConfig+0xf78>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e029      	b.n	80029b0 <HAL_RCC_OscConfig+0xfcc>
 800295c:	40021000 	.word	0x40021000
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800296c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f2a3 	rbit	r2, r3
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800298e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x1078>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fa92 f1a2 	rbit	r1, r2
 80029cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029d4:	6011      	str	r1, [r2, #0]
  return result;
 80029d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fab2 f282 	clz	r2, r2
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f002 021f 	and.w	r2, r2, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d180      	bne.n	80028fe <HAL_RCC_OscConfig+0xf1a>
 80029fc:	e027      	b.n	8002a4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01e      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_OscConfig+0x1078>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10b      	bne.n	8002a4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b09e      	sub	sp, #120	@ 0x78
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e162      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b90      	ldr	r3, [pc, #576]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b8d      	ldr	r3, [pc, #564]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	498b      	ldr	r1, [pc, #556]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b89      	ldr	r3, [pc, #548]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e14a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	497f      	ldr	r1, [pc, #508]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80dc 	beq.w	8002c8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d13c      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xf6>
 8002adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xa6>
 8002b00:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	e00f      	b.n	8002b26 <HAL_RCC_ClockConfig+0xc6>
 8002b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b22:	4b67      	ldr	r3, [pc, #412]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b36:	fab2 f282 	clz	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f042 0220 	orr.w	r2, r2, #32
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f002 021f 	and.w	r2, r2, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d17b      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0f3      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d13c      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x178>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x128>
 8002b82:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e00f      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
 8002b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba4:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bb8:	fab2 f282 	clz	r2, r2
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f002 021f 	and.w	r2, r2, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d13a      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b2      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1a0>
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	e00d      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1bc>
 8002c00:	2302      	movs	r3, #2
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	4b29      	ldr	r3, [pc, #164]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	61ba      	str	r2, [r7, #24]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	fa92 f2a2 	rbit	r2, r2
 8002c26:	617a      	str	r2, [r7, #20]
  return result;
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e079      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	491a      	ldr	r1, [pc, #104]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fa44 	bl	80010e8 <HAL_GetTick>
 8002c60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fa40 	bl	80010e8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e061      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d214      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4906      	ldr	r1, [pc, #24]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e040      	b.n	8002d3e <HAL_RCC_ClockConfig+0x2de>
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCC_ClockConfig+0x2e8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	491a      	ldr	r1, [pc, #104]	@ (8002d48 <HAL_RCC_ClockConfig+0x2e8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_RCC_ClockConfig+0x2e8>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4912      	ldr	r1, [pc, #72]	@ (8002d48 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d02:	f000 f829 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <HAL_RCC_ClockConfig+0x2e8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d10:	22f0      	movs	r2, #240	@ 0xf0
 8002d12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	40d3      	lsrs	r3, r2
 8002d26:	4a09      	ldr	r2, [pc, #36]	@ (8002d4c <HAL_RCC_ClockConfig+0x2ec>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_RCC_ClockConfig+0x2f0>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d32:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_ClockConfig+0x2f4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f992 	bl	8001060 <HAL_InitTick>
  
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3778      	adds	r7, #120	@ 0x78
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08003f68 	.word	0x08003f68
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d72:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x94>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x30>
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x36>
 8002d86:	e026      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d8a:	613b      	str	r3, [r7, #16]
      break;
 8002d8c:	e026      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0c9b      	lsrs	r3, r3, #18
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x94>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	4a14      	ldr	r2, [pc, #80]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002db4:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
      break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd8:	613b      	str	r3, [r7, #16]
      break;
 8002dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ddc:	693b      	ldr	r3, [r7, #16]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	08003f78 	.word	0x08003f78
 8002df8:	08003f88 	.word	0x08003f88
 8002dfc:	003d0900 	.word	0x003d0900

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b092      	sub	sp, #72	@ 0x48
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80d4 	beq.w	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10e      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a4a      	ldr	r2, [pc, #296]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	61d3      	str	r3, [r2, #28]
 8002e3c:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b45      	ldr	r3, [pc, #276]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b42      	ldr	r3, [pc, #264]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a41      	ldr	r2, [pc, #260]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f93f 	bl	80010e8 <HAL_GetTick>
 8002e6a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f93b 	bl	80010e8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	@ 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e169      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	4b38      	ldr	r3, [pc, #224]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8084 	beq.w	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d07c      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eac:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b26      	ldr	r3, [pc, #152]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2300      	movs	r3, #0
 8002efc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efe:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f8eb 	bl	80010e8 <HAL_GetTick>
 8002f12:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe f8e7 	bl	80010e8 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e113      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f38:	2302      	movs	r3, #2
 8002f3a:	623b      	str	r3, [r7, #32]
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	61fb      	str	r3, [r7, #28]
  return result;
 8002f44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d108      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f5a:	4b01      	ldr	r3, [pc, #4]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	e00d      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	10908100 	.word	0x10908100
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	4b78      	ldr	r3, [pc, #480]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	613a      	str	r2, [r7, #16]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	60fa      	str	r2, [r7, #12]
  return result;
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0b7      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	496a      	ldr	r1, [pc, #424]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd8:	4b60      	ldr	r3, [pc, #384]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	f023 0203 	bic.w	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	495d      	ldr	r1, [pc, #372]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ff6:	4b59      	ldr	r3, [pc, #356]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4956      	ldr	r1, [pc, #344]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003014:	4b51      	ldr	r3, [pc, #324]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	494e      	ldr	r1, [pc, #312]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f023 0210 	bic.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4947      	ldr	r1, [pc, #284]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003050:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	493f      	ldr	r1, [pc, #252]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f023 0220 	bic.w	r2, r3, #32
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4938      	ldr	r1, [pc, #224]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800308c:	4b33      	ldr	r3, [pc, #204]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4930      	ldr	r1, [pc, #192]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030aa:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4929      	ldr	r1, [pc, #164]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c8:	4b24      	ldr	r3, [pc, #144]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	4921      	ldr	r1, [pc, #132]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030e6:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	491a      	ldr	r1, [pc, #104]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003104:	4b15      	ldr	r3, [pc, #84]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	4912      	ldr	r1, [pc, #72]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003112:	4313      	orrs	r3, r2
 8003114:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003122:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	490b      	ldr	r1, [pc, #44]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3748      	adds	r7, #72	@ 0x48
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e09d      	b.n	80032ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003182:	d009      	beq.n	8003198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
 800318a:	e005      	b.n	8003198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fdd2 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031d8:	d902      	bls.n	80031e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e002      	b.n	80031e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031ee:	d007      	beq.n	8003200 <HAL_SPI_Init+0xa0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	ea42 0103 	orr.w	r1, r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	f003 0204 	and.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800327c:	ea42 0103 	orr.w	r1, r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b088      	sub	sp, #32
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_SPI_Transmit+0x22>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e15f      	b.n	8003598 <HAL_SPI_Transmit+0x2e2>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e0:	f7fd ff02 	bl	80010e8 <HAL_GetTick>
 80032e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fa:	e148      	b.n	800358e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Transmit+0x52>
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330c:	e13f      	b.n	800358e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2203      	movs	r2, #3
 8003312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003358:	d10f      	bne.n	800337a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003378:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d007      	beq.n	8003398 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a0:	d94f      	bls.n	8003442 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Transmit+0xfa>
 80033aa:	8afb      	ldrh	r3, [r7, #22]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d142      	bne.n	8003436 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d4:	e02f      	b.n	8003436 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d112      	bne.n	800340a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f4:	1c9a      	adds	r2, r3, #2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003408:	e015      	b.n	8003436 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800340a:	f7fd fe6d 	bl	80010e8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d803      	bhi.n	8003422 <HAL_SPI_Transmit+0x16c>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d102      	bne.n	8003428 <HAL_SPI_Transmit+0x172>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003434:	e0ab      	b.n	800358e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ca      	bne.n	80033d6 <HAL_SPI_Transmit+0x120>
 8003440:	e080      	b.n	8003544 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Transmit+0x19a>
 800344a:	8afb      	ldrh	r3, [r7, #22]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d174      	bne.n	800353a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d912      	bls.n	8003480 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b02      	subs	r3, #2
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800347e:	e05c      	b.n	800353a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034a6:	e048      	b.n	800353a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d12b      	bne.n	800350e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d912      	bls.n	80034e6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b02      	subs	r3, #2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e4:	e029      	b.n	800353a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800350c:	e015      	b.n	800353a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350e:	f7fd fdeb 	bl	80010e8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d803      	bhi.n	8003526 <HAL_SPI_Transmit+0x270>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit+0x276>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003538:	e029      	b.n	800358e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1b1      	bne.n	80034a8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f947 	bl	80037dc <SPI_EndRxTxTransaction>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e003      	b.n	800358e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003596:	7ffb      	ldrb	r3, [r7, #31]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035b0:	f7fd fd9a 	bl	80010e8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035c0:	f7fd fd92 	bl	80010e8 <HAL_GetTick>
 80035c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035c6:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	015b      	lsls	r3, r3, #5
 80035cc:	0d1b      	lsrs	r3, r3, #20
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	e054      	b.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d050      	beq.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035e0:	f7fd fd82 	bl	80010e8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d902      	bls.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d13d      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360e:	d111      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003618:	d004      	beq.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003622:	d107      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363c:	d10f      	bne.n	800365e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e017      	b.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3b01      	subs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d19b      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000

080036b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	@ 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036c2:	f7fd fd11 	bl	80010e8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036d2:	f7fd fd09 	bl	80010e8 <HAL_GetTick>
 80036d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036e0:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	0d1b      	lsrs	r3, r3, #20
 80036f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036f8:	e060      	b.n	80037bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003700:	d107      	bne.n	8003712 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003710:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d050      	beq.n	80037bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800371a:	f7fd fce5 	bl	80010e8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003726:	429a      	cmp	r2, r3
 8003728:	d902      	bls.n	8003730 <SPI_WaitFifoStateUntilTimeout+0x80>
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13d      	bne.n	80037ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800373e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003748:	d111      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003752:	d004      	beq.n	800375e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375c:	d107      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d10f      	bne.n	8003798 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003796:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e010      	b.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d196      	bne.n	80036fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000

080037dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff ff5b 	bl	80036b0 <SPI_WaitFifoStateUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e027      	b.n	8003860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	2180      	movs	r1, #128	@ 0x80
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fec0 	bl	80035a0 <SPI_WaitFlagStateUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e014      	b.n	8003860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff ff34 	bl	80036b0 <SPI_WaitFifoStateUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e000      	b.n	8003860 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003870:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b29b      	uxth	r3, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	b29b      	uxth	r3, r3
 8003886:	4013      	ands	r3, r2
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <memset>:
 80038da:	4402      	add	r2, r0
 80038dc:	4603      	mov	r3, r0
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <memset+0xa>
 80038e2:	4770      	bx	lr
 80038e4:	f803 1b01 	strb.w	r1, [r3], #1
 80038e8:	e7f9      	b.n	80038de <memset+0x4>
	...

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003924 <__libc_init_array+0x38>)
 80038f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003928 <__libc_init_array+0x3c>)
 80038f2:	1b64      	subs	r4, r4, r5
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	2600      	movs	r6, #0
 80038f8:	42a6      	cmp	r6, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	4d0b      	ldr	r5, [pc, #44]	@ (800392c <__libc_init_array+0x40>)
 80038fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003930 <__libc_init_array+0x44>)
 8003900:	f000 f818 	bl	8003934 <_init>
 8003904:	1b64      	subs	r4, r4, r5
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	2600      	movs	r6, #0
 800390a:	42a6      	cmp	r6, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f855 3b04 	ldr.w	r3, [r5], #4
 8003914:	4798      	blx	r3
 8003916:	3601      	adds	r6, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f855 3b04 	ldr.w	r3, [r5], #4
 800391e:	4798      	blx	r3
 8003920:	3601      	adds	r6, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	0800409c 	.word	0x0800409c
 8003928:	0800409c 	.word	0x0800409c
 800392c:	0800409c 	.word	0x0800409c
 8003930:	080040a0 	.word	0x080040a0

08003934 <_init>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr

08003940 <_fini>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr
