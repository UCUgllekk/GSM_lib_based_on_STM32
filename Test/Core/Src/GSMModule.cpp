/**
  ******************************************************************************
  * @file     lib.c
  * @author   Auto-generated by STM32CubeIDE
  * @version  V1.0
  * @date     02/11/2024 18:42:21
  * @brief    Default under dev library file.
  ******************************************************************************
*/

/* Includes ------------------------------------------------------------------*/
#include "GSMModule.hpp"
#include "usart.h"
#include "usb.h"
#include <cstring>
#include <iostream>
#include <string>

const char* MSG = "AT+CMGS=";
const char* MSG_MODE_1 = "AT+CMGF=1\r\n";
const char* MSG_MODE_0 = "AT+CMGF=0\r\n";

const char* CALL = "ATD+";

const char* AT = "AT\r\n";

static GSM_Module* gsm = nullptr;

GSM_Module::GSM_Module(const Parameters& parameters){
	gsm = this;
	this->parameters = parameters;
	if(!send_at_command(AT)){
        throw std::runtime_error("UART transmit failed!");
	}
	HAL_UART_Receive_IT(this->parameters.uart_handle, &rx_buffer[rx_index], 1);
}

void GSM_Module::make_call(const char* number){
	// make call
	char command[32];
	snprintf(command, sizeof(command), "%s%s\r\n", CALL, number);
	HAL_UART_Transmit(this->parameters.uart_handle, (uint8_t*)command, strlen(command), 100);
}

void GSM_Module::receive_call() {
	HAL_UART_Transmit(this->parameters.uart_handle, (uint8_t*)"ATA\r\n", 5, 100);
}
//	char command[32];
//	int index = 0;
//
//	while (true) {
//		uint8_t received_char;
//
//		HAL_UART_Receive(this->parameters.uart_handle, &received_char, 1, 100);
//
//		if (received_char) {
//			command[index] = received_char;
//
//			index++;
//
//			std::string result = command;
//
//			if (result.find("RING") <= sizeof(command) - 1) {
//				HAL_UART_Transmit(this->parameters.uart_handle, (uint8_t*)"ATA\r\n", 5, 100);
//			}
//		}
//
//		if (index >= sizeof(command) - 1) {
//			memset(command, 0, sizeof(command));
//			index = 0;
//		}

void GSM_Module::hang_up(){
	HAL_UART_Transmit(this->parameters.uart_handle, (uint8_t*)"ATH\r\n", 5, 100);
}


bool GSM_Module::send_at_command(const char* command){
	if (HAL_UART_Transmit(this->parameters.uart_handle, (uint8_t*)command, strlen(command), 10) != HAL_OK){
		return false;
	}
	char answer[256];
	HAL_StatusTypeDef result = HAL_UART_Receive(this->parameters.uart_handle, (uint8_t*)answer, sizeof(answer), 10);
	if (result == HAL_OK) {
		if (!strstr(answer, "OK")){
			return false;
		}
	}
	return true;
}

void GSM_Module::handle_interruption(){
    if (strstr((char*)rx_buffer, "+CMTI:")) {

        int index = 0;

        sscanf((char*)rx_buffer, "+CMTI: \"SM\",%d", &index);

        char command[32];

        snprintf(command, sizeof(command), "AT+CMGR=%d\r\n", index); // Read SMS

        send_at_command(command);

    } else if (strstr((char*)rx_buffer, "RING")) {

    	receive_call();

    }
    rx_index = 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if (gsm && huart == gsm->parameters.uart_handle){

        gsm->rx_index = (gsm->rx_index + 1) % 256;

        gsm->handle_interruption();

        HAL_UART_Receive_IT(huart, &gsm->rx_buffer[gsm->rx_index], 1);
	}
}

void GSM_Module::send_sms(const char* number, const char* message){

	send_at_command(MSG_MODE_1);
	HAL_Delay(1000);

	char command[32];
	snprintf(command, sizeof(command), "%s\"+%s\"", MSG, number);
	send_at_command(command);
	HAL_Delay(1000);

	char msg[256];

    snprintf(msg, sizeof(msg), "%s\r\n0x1A", message);
    send_at_command(msg);

    send_at_command(MSG_MODE_0);
}

Parameters load_parameters(){
	Parameters parameters;
	parameters.uart_handle = &huart2;
	parameters.rx_pin = USART_RX_Pin;
	parameters.rx_port = USART_RX_GPIO_Port;
	parameters.tx_pin = USART_TX_Pin;
	parameters.tx_port = USART_TX_GPIO_Port;
	return parameters;
}

int _write(int file, char *data, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
    return len;
}
